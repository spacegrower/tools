// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.3
// source: etc/proto/spacegrower.spacegrower.registry.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (Registry_RegisterClient, error)
	RegisterMulti(ctx context.Context, opts ...grpc.CallOption) (Registry_RegisterMultiClient, error)
	Resolver(ctx context.Context, in *TargetInfo, opts ...grpc.CallOption) (Registry_ResolverClient, error)
}

type registryClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryClient(cc grpc.ClientConnInterface) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) Register(ctx context.Context, opts ...grpc.CallOption) (Registry_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Registry_ServiceDesc.Streams[0], "/space.Registry/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryRegisterClient{stream}
	return x, nil
}

type Registry_RegisterClient interface {
	Send(*ServiceInfo) error
	Recv() (*Command, error)
	grpc.ClientStream
}

type registryRegisterClient struct {
	grpc.ClientStream
}

func (x *registryRegisterClient) Send(m *ServiceInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registryRegisterClient) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registryClient) RegisterMulti(ctx context.Context, opts ...grpc.CallOption) (Registry_RegisterMultiClient, error) {
	stream, err := c.cc.NewStream(ctx, &Registry_ServiceDesc.Streams[1], "/space.Registry/RegisterMulti", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryRegisterMultiClient{stream}
	return x, nil
}

type Registry_RegisterMultiClient interface {
	Send(*MoultiService) error
	Recv() (*Command, error)
	grpc.ClientStream
}

type registryRegisterMultiClient struct {
	grpc.ClientStream
}

func (x *registryRegisterMultiClient) Send(m *MoultiService) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registryRegisterMultiClient) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registryClient) Resolver(ctx context.Context, in *TargetInfo, opts ...grpc.CallOption) (Registry_ResolverClient, error) {
	stream, err := c.cc.NewStream(ctx, &Registry_ServiceDesc.Streams[2], "/space.Registry/Resolver", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryResolverClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Registry_ResolverClient interface {
	Recv() (*ResolveInfo, error)
	grpc.ClientStream
}

type registryResolverClient struct {
	grpc.ClientStream
}

func (x *registryResolverClient) Recv() (*ResolveInfo, error) {
	m := new(ResolveInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegistryServer is the server API for Registry service.
// All implementations must embed UnimplementedRegistryServer
// for forward compatibility
type RegistryServer interface {
	Register(Registry_RegisterServer) error
	RegisterMulti(Registry_RegisterMultiServer) error
	Resolver(*TargetInfo, Registry_ResolverServer) error
	mustEmbedUnimplementedRegistryServer()
}

// UnimplementedRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (UnimplementedRegistryServer) Register(Registry_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRegistryServer) RegisterMulti(Registry_RegisterMultiServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterMulti not implemented")
}
func (UnimplementedRegistryServer) Resolver(*TargetInfo, Registry_ResolverServer) error {
	return status.Errorf(codes.Unimplemented, "method Resolver not implemented")
}
func (UnimplementedRegistryServer) mustEmbedUnimplementedRegistryServer() {}

// UnsafeRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServer will
// result in compilation errors.
type UnsafeRegistryServer interface {
	mustEmbedUnimplementedRegistryServer()
}

func RegisterRegistryServer(s grpc.ServiceRegistrar, srv RegistryServer) {
	s.RegisterService(&Registry_ServiceDesc, srv)
}

func _Registry_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegistryServer).Register(&registryRegisterServer{stream})
}

type Registry_RegisterServer interface {
	Send(*Command) error
	Recv() (*ServiceInfo, error)
	grpc.ServerStream
}

type registryRegisterServer struct {
	grpc.ServerStream
}

func (x *registryRegisterServer) Send(m *Command) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registryRegisterServer) Recv() (*ServiceInfo, error) {
	m := new(ServiceInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Registry_RegisterMulti_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegistryServer).RegisterMulti(&registryRegisterMultiServer{stream})
}

type Registry_RegisterMultiServer interface {
	Send(*Command) error
	Recv() (*MoultiService, error)
	grpc.ServerStream
}

type registryRegisterMultiServer struct {
	grpc.ServerStream
}

func (x *registryRegisterMultiServer) Send(m *Command) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registryRegisterMultiServer) Recv() (*MoultiService, error) {
	m := new(MoultiService)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Registry_Resolver_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TargetInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistryServer).Resolver(m, &registryResolverServer{stream})
}

type Registry_ResolverServer interface {
	Send(*ResolveInfo) error
	grpc.ServerStream
}

type registryResolverServer struct {
	grpc.ServerStream
}

func (x *registryResolverServer) Send(m *ResolveInfo) error {
	return x.ServerStream.SendMsg(m)
}

// Registry_ServiceDesc is the grpc.ServiceDesc for Registry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "space.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Registry_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RegisterMulti",
			Handler:       _Registry_RegisterMulti_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Resolver",
			Handler:       _Registry_Resolver_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "etc/proto/spacegrower.spacegrower.registry.proto",
}
